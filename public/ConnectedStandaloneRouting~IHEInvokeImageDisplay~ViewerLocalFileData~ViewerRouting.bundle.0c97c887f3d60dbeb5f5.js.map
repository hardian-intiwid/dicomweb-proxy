{"version":3,"sources":["webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js"],"names":["scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","menuOptionEntry","value","target","icon","bottomLabel","label","unshift","t","prevProps","activeContextsChanged","prevStudies","studiesUpdated","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","document","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","loading","progress","studiesWithLoadingData","study","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","studyMetadata","isArray","reduce","all","current","currentDisplaySet","displaySets","concat","ds","findDisplaySetByUID","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","StudyInstanceUID","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","utils","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","useEffect","promise","catch","error","show","message","autoClose","ViewportPanes","React","useMemo","pluginName","ViewportComponent","Error","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","fromSideClass","styles","maxWidth","marginRight","isOpen","Number","parseInt","UIModalService","servicesManager","services","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","dismissAll","timepointApi","measurementApi","currentTimepointId","_mapStudiesToThumbnails","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","undefined","linkPath","createLogoComponentFn","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","Modality","images","getImageId","wadoRoot","imageId","altImageText","imageIndex","Math","floor","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer"],"mappings":"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","file":"ConnectedStandaloneRouting~IHEInvokeImageDisplay~ViewerLocalFileData~ViewerRouting.bundle.0c97c887f3d60dbeb5f5.js","sourcesContent":["import { connect } from 'react-redux';\r\nimport { CineDialog } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport csTools from 'cornerstone-tools';\r\nimport { commandsManager } from './../App.js';\r\n// Our target output kills the `as` and \"import\" throws a keyword error\r\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nconst toolImport = csTools.import;\r\nconst scrollToIndex = toolImport('util/scrollToIndex');\r\nconst { setViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// Why do I need or care about any of this info?\r\n// A dispatch action should be able to pull this at the time of an event?\r\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\r\nconst mapStateToProps = state => {\r\n  // Get activeViewport's `cine` and `stack`\r\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\r\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\r\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\r\n\r\n  const cineData = cine || {\r\n    isPlaying: false,\r\n    cineFrameRate: 24,\r\n  };\r\n\r\n  // New props we're creating?\r\n  return {\r\n    activeEnabledElement: dom,\r\n    activeViewportCineData: cineData,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\r\n  const {\r\n    activeEnabledElement,\r\n    activeViewportCineData,\r\n    activeViewportIndex,\r\n  } = propsFromState;\r\n\r\n  return {\r\n    cineFrameRate: activeViewportCineData.cineFrameRate,\r\n    isPlaying: activeViewportCineData.isPlaying,\r\n    onPlayPauseChanged: isPlaying => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.isPlaying = !cine.isPlaying;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onFrameRateChanged: frameRate => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.cineFrameRate = frameRate;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onClickNextButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\r\n      if (currentImageIdIndex >= imageIds.length - 1) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\r\n    },\r\n    onClickBackButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex } = stackData.data[0];\r\n      if (currentImageIdIndex === 0) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\r\n    },\r\n    onClickSkipToStart: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      scrollToIndex(activeEnabledElement, 0);\r\n    },\r\n    onClickSkipToEnd: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const lastIndex = stackData.data[0].imageIds.length - 1;\r\n      scrollToIndex(activeEnabledElement, lastIndex);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCineDialog = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(CineDialog);\r\n\r\nexport default ConnectedCineDialog;\r\n","import { LayoutButton } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\n\r\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentLayout: state.viewports.layout,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // TODO: Change if layout switched becomes more complex\r\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\r\n      const viewports = [];\r\n      const numRows = selectedCell.row + 1;\r\n      const numColumns = selectedCell.col + 1;\r\n      const numViewports = numRows * numColumns;\r\n\r\n      for (let i = 0; i < numViewports; i++) {\r\n        // Hacky way to allow users to exit MPR \"mode\"\r\n        const viewport = currentLayout.viewports[i];\r\n        let plugin = viewport && viewport.plugin;\r\n        if (viewport && viewport.vtk) {\r\n          plugin = 'cornerstone';\r\n        }\r\n\r\n        viewports.push({\r\n          plugin,\r\n        });\r\n      }\r\n      const layout = {\r\n        numRows,\r\n        numColumns,\r\n        viewports,\r\n      };\r\n\r\n      const maxActiveIndex = numViewports - 1;\r\n      if (activeViewportIndex > maxActiveIndex) {\r\n        dispatch(setViewportActive(0));\r\n      }\r\n\r\n      dispatch(setLayout(layout));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch) => {\r\n  const onChangeFromDispatch = propsFromDispatch.onChange;\r\n  const { currentLayout, activeViewportIndex } = propsFromState;\r\n\r\n  return {\r\n    onChange: selectedCell =>\r\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\r\n  };\r\n};\r\n\r\nconst ConnectedLayoutButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(LayoutButton);\r\n\r\nexport default ConnectedLayoutButton;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport {\r\n  ExpandableToolMenu,\r\n  RoundedButtonGroup,\r\n  ToolbarButton,\r\n  withModal,\r\n  withDialog,\r\n} from '@ohif/ui';\r\n\r\nimport './ToolbarRow.css';\r\nimport { commandsManager, extensionManager } from './../App.js';\r\n\r\nimport ConnectedCineDialog from './ConnectedCineDialog';\r\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\r\nimport { withAppContext } from '../context/AppContext';\r\n\r\nclass ToolbarRow extends Component {\r\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\r\n  // closed if selected is null/undefined\r\n  static propTypes = {\r\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\r\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\r\n    selectedLeftSidePanel: PropTypes.string.isRequired,\r\n    selectedRightSidePanel: PropTypes.string.isRequired,\r\n    handleSidePanelChange: PropTypes.func.isRequired,\r\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    studies: PropTypes.array,\r\n    t: PropTypes.func.isRequired,\r\n    // NOTE: withDialog, withModal HOCs\r\n    dialog: PropTypes.any,\r\n    modal: PropTypes.any,\r\n  };\r\n\r\n  static defaultProps = {\r\n    studies: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\r\n    // TODO:\r\n    // If it's a tool that can be active... Mark it as active?\r\n    // - Tools that are on/off?\r\n    // - Tools that can be bound to multiple buttons?\r\n\r\n    // Normal ToolbarButtons...\r\n    // Just how high do we need to hoist this state?\r\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\r\n    this.state = {\r\n      toolbarButtons: toolbarButtonDefinitions,\r\n      activeButtons: [],\r\n    };\r\n\r\n    this.seriesPerStudyCount = [];\r\n\r\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\r\n\r\n    this.updateButtonGroups();\r\n  }\r\n\r\n  updateButtonGroups() {\r\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    this.buttonGroups = {\r\n      left: [],\r\n      right: [],\r\n    };\r\n\r\n    // ~ FIND MENU OPTIONS\r\n    panelModules.forEach(panelExtension => {\r\n      const panelModule = panelExtension.module;\r\n      const defaultContexts = Array.from(panelModule.defaultContext);\r\n\r\n      panelModule.menuOptions.forEach(menuOption => {\r\n        const contexts = Array.from(menuOption.context || defaultContexts);\r\n        const hasActiveContext = this.props.activeContexts.some(actx =>\r\n          contexts.includes(actx)\r\n        );\r\n\r\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\r\n        // Note: This does not cleanly handle `studies` prop updating with panel open\r\n        const isDisabled =\r\n          typeof menuOption.isDisabled === 'function' &&\r\n          menuOption.isDisabled(this.props.studies);\r\n\r\n        if (hasActiveContext && !isDisabled) {\r\n          const menuOptionEntry = {\r\n            value: menuOption.target,\r\n            icon: menuOption.icon,\r\n            bottomLabel: menuOption.label,\r\n          };\r\n          const from = menuOption.from || 'right';\r\n\r\n          this.buttonGroups[from].push(menuOptionEntry);\r\n        }\r\n      });\r\n    });\r\n\r\n    // TODO: This should come from extensions, instead of being baked in\r\n    this.buttonGroups.left.unshift({\r\n      value: 'studies',\r\n      icon: 'th-large',\r\n      bottomLabel: this.props.t('Series'),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const activeContextsChanged =\r\n      prevProps.activeContexts !== this.props.activeContexts;\r\n\r\n    const prevStudies = prevProps.studies;\r\n    const studies = this.props.studies;\r\n    const seriesPerStudyCount = this.seriesPerStudyCount;\r\n\r\n    let studiesUpdated = false;\r\n\r\n    if (prevStudies.length !== studies.length) {\r\n      studiesUpdated = true;\r\n    } else {\r\n      for (let i = 0; i < studies.length; i++) {\r\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\r\n          seriesPerStudyCount[i] = studies[i].series.length;\r\n\r\n          studiesUpdated = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (studiesUpdated) {\r\n      this.updateButtonGroups();\r\n    }\r\n\r\n    if (activeContextsChanged) {\r\n      this.setState(\r\n        {\r\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n        },\r\n        this.closeCineDialogIfNotApplicable\r\n      );\r\n    }\r\n  }\r\n\r\n  closeCineDialogIfNotApplicable = () => {\r\n    const { dialog } = this.props;\r\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\r\n    if (dialogId) {\r\n      const cineButtonPresent = toolbarButtons.find(\r\n        button => button.options && button.options.behavior === 'CINE'\r\n      );\r\n      if (!cineButtonPresent) {\r\n        dialog.dismiss({ id: dialogId });\r\n        activeButtons = activeButtons.filter(\r\n          button => button.options && button.options.behavior !== 'CINE'\r\n        );\r\n        this.setState({ dialogId: null, activeButtons });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const buttonComponents = _getButtonComponents.call(\r\n      this,\r\n      this.state.toolbarButtons,\r\n      this.state.activeButtons\r\n    );\r\n\r\n    const onPress = (side, value) => {\r\n      this.props.handleSidePanelChange(side, value);\r\n    };\r\n    const onPressLeft = onPress.bind(this, 'left');\r\n    const onPressRight = onPress.bind(this, 'right');\r\n\r\n    return (\r\n      <>\r\n        <div className=\"ToolbarRow\">\r\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\r\n            <RoundedButtonGroup\r\n              options={this.buttonGroups.left}\r\n              value={this.props.selectedLeftSidePanel || ''}\r\n              onValueChanged={onPressLeft}\r\n            />\r\n          </div>\r\n          {buttonComponents}\r\n          <ConnectedLayoutButton />\r\n          <div\r\n            className=\"pull-right m-t-1 rm-x-1\"\r\n            style={{ marginLeft: 'auto' }}\r\n          >\r\n            {this.buttonGroups.right.length && (\r\n              <RoundedButtonGroup\r\n                options={this.buttonGroups.right}\r\n                value={this.props.selectedRightSidePanel || ''}\r\n                onValueChanged={onPressRight}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getCustomButtonComponent(button, activeButtons) {\r\n  const CustomComponent = button.CustomComponent;\r\n  const isValidComponent = typeof CustomComponent === 'function';\r\n\r\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\r\n  if (isValidComponent) {\r\n    const parentContext = this;\r\n    const activeButtonsIds = activeButtons.map(button => button.id);\r\n    const isActive = activeButtonsIds.includes(button.id);\r\n\r\n    return (\r\n      <CustomComponent\r\n        parentContext={parentContext}\r\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\r\n        button={button}\r\n        key={button.id}\r\n        activeButtons={activeButtonsIds}\r\n        isActive={isActive}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getExpandableButtonComponent(button, activeButtons) {\r\n  // Iterate over button definitions and update `onClick` behavior\r\n  let activeCommand;\r\n  const childButtons = button.buttons.map(childButton => {\r\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\r\n\r\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\r\n      activeCommand = childButton.id;\r\n    }\r\n\r\n    return childButton;\r\n  });\r\n\r\n  return (\r\n    <ExpandableToolMenu\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      buttons={childButtons}\r\n      activeCommand={activeCommand}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getDefaultButtonComponent(button, activeButtons) {\r\n  return (\r\n    <ToolbarButton\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      onClick={_handleToolbarButtonClick.bind(this, button)}\r\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\r\n    />\r\n  );\r\n}\r\n/**\r\n * Determine which extension buttons should be showing, if they're\r\n * active, and what their onClick behavior should be.\r\n */\r\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\r\n  const _this = this;\r\n  return toolbarButtons.map(button => {\r\n    const hasCustomComponent = button.CustomComponent;\r\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\r\n\r\n    if (hasCustomComponent) {\r\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    if (hasNestedButtonDefinitions) {\r\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\r\n  });\r\n}\r\n\r\n/**\r\n * TODO: DEPRECATE\r\n * This is used exclusively in `extensions/cornerstone/src`\r\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\r\n *\r\n * A handy way for us to handle different button types. IE. firing commands for\r\n * buttons, or initiation built in behavior.\r\n *\r\n * @param {*} button\r\n * @param {*} evt\r\n * @param {*} props\r\n */\r\nfunction _handleToolbarButtonClick(button, evt, props) {\r\n  const { activeButtons } = this.state;\r\n\r\n  if (button.commandName) {\r\n    const options = Object.assign({ evt }, button.commandOptions);\r\n    commandsManager.runCommand(button.commandName, options);\r\n  }\r\n\r\n  // TODO: Use Types ENUM\r\n  // TODO: We can update this to be a `getter` on the extension to query\r\n  //       For the active tools after we apply our updates?\r\n  if (button.type === 'setToolActive') {\r\n    const toggables = activeButtons.filter(\r\n      ({ options }) => options && !options.togglable\r\n    );\r\n    this.setState({ activeButtons: [...toggables, button] });\r\n  } else if (button.type === 'builtIn') {\r\n    this._handleBuiltIn(button);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _getVisibleToolbarButtons() {\r\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\r\n  const toolbarButtonDefinitions = [];\r\n\r\n  toolbarModules.forEach(extension => {\r\n    const { definitions, defaultContext } = extension.module;\r\n    definitions.forEach(definition => {\r\n      const context = definition.context || defaultContext;\r\n\r\n      if (this.props.activeContexts.includes(context)) {\r\n        toolbarButtonDefinitions.push(definition);\r\n      }\r\n    });\r\n  });\r\n\r\n  return toolbarButtonDefinitions;\r\n}\r\n\r\nfunction _handleBuiltIn(button) {\r\n  /* TODO: Keep cine button active until its unselected. */\r\n  const { dialog, t } = this.props;\r\n  const { dialogId } = this.state;\r\n  const { id, options } = button;\r\n\r\n  if (options.behavior === 'CINE') {\r\n    if (dialogId) {\r\n      dialog.dismiss({ id: dialogId });\r\n      this.setState(state => ({\r\n        dialogId: null,\r\n        activeButtons: [\r\n          ...state.activeButtons.filter(button => button.id !== id),\r\n        ],\r\n      }));\r\n    } else {\r\n      const spacing = 20;\r\n      const { x, y } = document\r\n        .querySelector(`.ViewerMain`)\r\n        .getBoundingClientRect();\r\n      const newDialogId = dialog.create({\r\n        content: ConnectedCineDialog,\r\n        defaultPosition: {\r\n          x: x + spacing || 0,\r\n          y: y + spacing || 0,\r\n        },\r\n      });\r\n      this.setState(state => ({\r\n        dialogId: newDialogId,\r\n        activeButtons: [...state.activeButtons, button],\r\n      }));\r\n    }\r\n  }\r\n\r\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\r\n    commandsManager.runCommand('showDownloadViewportModal', {\r\n      title: t('Download High Quality Image'),\r\n    });\r\n  }\r\n}\r\n\r\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\r\n  withModal(withDialog(withAppContext(ToolbarRow)))\r\n);\r\n","import OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { StudyBrowser } from '@ohif/ui';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport findDisplaySetByUID from './findDisplaySetByUID';\r\n\r\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// TODO\r\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\r\n// - Pass in errors and stack loading progress from Redux\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // If we know that the stack loading progress details have changed,\r\n  // we can try to update the component state so that the thumbnail\r\n  // progress bar is updated\r\n  const stackLoadingProgressMap = state.loading.progress;\r\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\r\n\r\n  studiesWithLoadingData.forEach(study => {\r\n    study.thumbnails.forEach(data => {\r\n      const { displaySetInstanceUID } = data;\r\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\r\n      const stackProgressData = stackLoadingProgressMap[stackId];\r\n\r\n      let stackPercentComplete = 0;\r\n      if (stackProgressData) {\r\n        stackPercentComplete = stackProgressData.percentComplete;\r\n      }\r\n\r\n      data.stackPercentComplete = stackPercentComplete;\r\n    });\r\n  });\r\n\r\n  return {\r\n    studies: studiesWithLoadingData,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onThumbnailClick: displaySetInstanceUID => {\r\n      const displaySet = findDisplaySetByUID(\r\n        ownProps.studyMetadata,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      dispatch(setActiveViewportSpecificData(displaySet));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedStudyBrowser = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(StudyBrowser);\r\n\r\nexport default ConnectedStudyBrowser;\r\n","/**\r\n * Finds displaySet by UID across all displaySets inside studyMetadata\r\n * @param {Array} studyMetadata\r\n * @param {string} displaySetInstanceUID\r\n */\r\nexport default function findDisplaySetByUID(\r\n  studyMetadata,\r\n  displaySetInstanceUID\r\n) {\r\n  if (!Array.isArray(studyMetadata)) return null;\r\n\r\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\r\n    let currentDisplaySet = [];\r\n    if (current && Array.isArray(current.displaySets)) {\r\n      currentDisplaySet = current.displaySets;\r\n    }\r\n    return all.concat(currentDisplaySet);\r\n  }, []);\r\n\r\n  const bySetInstanceUID = ds =>\r\n    ds.displaySetInstanceUID === displaySetInstanceUID;\r\n\r\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\r\n  return displaySet || null;\r\n}\r\n","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './ViewportPane.css';\r\n\r\nconst ViewportPane = function (props) {\r\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\r\n  const [{ hovered, highlighted }, drop] = useDrop({\r\n    accept: 'thumbnail',\r\n    drop: (droppedItem, monitor) => {\r\n      const canDrop = monitor.canDrop();\r\n      const isOver = monitor.isOver();\r\n\r\n      if (canDrop && isOver && onDrop) {\r\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\r\n\r\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\r\n      }\r\n    },\r\n    // Monitor, and collect props.\r\n    // Returned as values by `useDrop`\r\n    collect: monitor => ({\r\n      highlighted: monitor.canDrop(),\r\n      hovered: monitor.isOver(),\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'viewport-drop-target',\r\n        { hovered: hovered },\r\n        { highlighted: highlighted },\r\n        propClassName\r\n      )}\r\n      ref={drop}\r\n      data-cy={`viewport-container-${viewportIndex}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportPane.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  onDrop: PropTypes.func.isRequired,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default ViewportPane;\r\n","import './ViewportGrid.css';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { utils } from '@ohif/core';\r\nimport { useSnackbarContext } from '@ohif/ui';\r\n//\r\nimport ViewportPane from './ViewportPane.js';\r\nimport DefaultViewport from './DefaultViewport.js';\r\nimport EmptyViewport from './EmptyViewport.js';\r\n\r\nconst { loadAndCacheDerivedDisplaySets } = utils;\r\n\r\nconst ViewportGrid = function(props) {\r\n  const {\r\n    activeViewportIndex,\r\n    availablePlugins,\r\n    defaultPlugin: defaultPluginName,\r\n    layout,\r\n    numRows,\r\n    numColumns,\r\n    setViewportData,\r\n    studies,\r\n    viewportData,\r\n    children,\r\n    isStudyLoaded,\r\n  } = props;\r\n\r\n  const rowSize = 100 / numRows;\r\n  const colSize = 100 / numColumns;\r\n\r\n  // http://grid.malven.co/\r\n  if (!viewportData || !viewportData.length) {\r\n    return null;\r\n  }\r\n\r\n  const snackbar = useSnackbarContext();\r\n\r\n  useEffect(() => {\r\n    if (isStudyLoaded) {\r\n      viewportData.forEach(displaySet => {\r\n        const promises = loadAndCacheDerivedDisplaySets(displaySet, studies);\r\n\r\n        promises.forEach(promise => {\r\n          promise.catch(error => {\r\n            snackbar.show({\r\n              title: 'Error loading derived display set:',\r\n              message: error.message,\r\n              type: 'error',\r\n              autoClose: false,\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\r\n\r\n  const getViewportPanes = () =>\r\n    layout.viewports.map((layout, viewportIndex) => {\r\n      const displaySet = viewportData[viewportIndex];\r\n\r\n      if (!displaySet) {\r\n        return null;\r\n      }\r\n\r\n      const data = {\r\n        displaySet,\r\n        studies,\r\n      };\r\n\r\n      // JAMES TODO:\r\n\r\n      // Use whichever plugin is currently in use in the panel\r\n      // unless nothing is specified. If nothing is specified\r\n      // and the display set has a plugin specified, use that.\r\n      //\r\n      // TODO: Change this logic to:\r\n      // - Plugins define how capable they are of displaying a SopClass\r\n      // - When updating a panel, ensure that the currently enabled plugin\r\n      // in the viewport is capable of rendering this display set. If not\r\n      // then use the most capable available plugin\r\n      const pluginName =\r\n        !layout.plugin && displaySet && displaySet.plugin\r\n          ? displaySet.plugin\r\n          : layout.plugin;\r\n\r\n      const ViewportComponent = _getViewportComponent(\r\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\r\n        viewportIndex,\r\n        children,\r\n        availablePlugins,\r\n        pluginName,\r\n        defaultPluginName\r\n      );\r\n\r\n      return (\r\n        <ViewportPane\r\n          onDrop={setViewportData}\r\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\r\n          className={classNames('viewport-container', {\r\n            active: activeViewportIndex === viewportIndex,\r\n          })}\r\n          key={viewportIndex}\r\n        >\r\n          {ViewportComponent}\r\n        </ViewportPane>\r\n      );\r\n    });\r\n\r\n  const ViewportPanes = React.useMemo(getViewportPanes, [\r\n    layout,\r\n    viewportData,\r\n    studies,\r\n    children,\r\n    availablePlugins,\r\n    defaultPluginName,\r\n    setViewportData,\r\n    activeViewportIndex,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      data-cy=\"viewprt-grid\"\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\r\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\r\n        height: '100%',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      {ViewportPanes}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportGrid.propTypes = {\r\n  viewportData: PropTypes.array.isRequired,\r\n  supportsDrop: PropTypes.bool.isRequired,\r\n  activeViewportIndex: PropTypes.number.isRequired,\r\n  layout: PropTypes.object.isRequired,\r\n  availablePlugins: PropTypes.object.isRequired,\r\n  setViewportData: PropTypes.func.isRequired,\r\n  studies: PropTypes.array,\r\n  children: PropTypes.node,\r\n  defaultPlugin: PropTypes.string,\r\n  numRows: PropTypes.number.isRequired,\r\n  numColumns: PropTypes.number.isRequired,\r\n};\r\n\r\nViewportGrid.defaultProps = {\r\n  viewportData: [],\r\n  numRows: 1,\r\n  numColumns: 1,\r\n  layout: {\r\n    viewports: [{}],\r\n  },\r\n  activeViewportIndex: 0,\r\n  supportsDrop: true,\r\n  availablePlugins: {\r\n    DefaultViewport,\r\n  },\r\n  defaultPlugin: 'defaultViewportPlugin',\r\n};\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} plugin\r\n * @param {*} viewportData\r\n * @param {*} viewportIndex\r\n * @param {*} children\r\n * @returns\r\n */\r\nfunction _getViewportComponent(\r\n  viewportData,\r\n  viewportIndex,\r\n  children,\r\n  availablePlugins,\r\n  pluginName,\r\n  defaultPluginName\r\n) {\r\n  if (viewportData.displaySet) {\r\n    pluginName = pluginName || defaultPluginName;\r\n    const ViewportComponent = availablePlugins[pluginName];\r\n\r\n    if (!ViewportComponent) {\r\n      throw new Error(\r\n        `No Viewport Component available for name ${pluginName}.\r\n         Available plugins: ${JSON.stringify(availablePlugins)}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewportComponent\r\n        viewportData={viewportData}\r\n        viewportIndex={viewportIndex}\r\n        children={[children]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <EmptyViewport />;\r\n}\r\n\r\nexport default ViewportGrid;\r\n","/**\r\n *\r\n *\r\n * @export\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function DefaultViewport(props) {\r\n  return <div>{JSON.stringify(props)}</div>;\r\n}\r\n","import ViewportGrid from './ViewportGrid.js';\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { extensionManager } from './../../App.js';\r\nimport memoize from 'lodash/memoize';\r\n\r\nconst getAvailableViewportModules = memoize(viewportModules => {\r\n  const availableViewportModules = {};\r\n  viewportModules.forEach(moduleDefinition => {\r\n    availableViewportModules[moduleDefinition.extensionId] =\r\n      moduleDefinition.module;\r\n  });\r\n  return availableViewportModules;\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\r\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\r\n\r\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\r\n  let defaultPlugin;\r\n  if (viewportModules.length) {\r\n    defaultPlugin = viewportModules[0].extensionId;\r\n  }\r\n\r\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\r\n\r\n  return {\r\n    numRows,\r\n    numColumns,\r\n    layout,\r\n    activeViewportIndex,\r\n    // TODO: rename `availableViewportModules`\r\n    availablePlugins: availableViewportModules,\r\n    // TODO: rename `defaultViewportModule`\r\n    defaultPlugin,\r\n  };\r\n};\r\n\r\nconst ConnectedViewportGrid = connect(\r\n  mapStateToProps,\r\n  null\r\n)(ViewportGrid);\r\n\r\nexport default ConnectedViewportGrid;\r\n","import './ViewerMain.css';\r\n\r\nimport { Component } from 'react';\r\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport memoize from 'lodash/memoize';\r\nimport _values from 'lodash/values';\r\n\r\nvar values = memoize(_values);\r\n\r\nclass ViewerMain extends Component {\r\n  static propTypes = {\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    studies: PropTypes.array,\r\n    viewportSpecificData: PropTypes.object.isRequired,\r\n    layout: PropTypes.object.isRequired,\r\n    setViewportSpecificData: PropTypes.func.isRequired,\r\n    clearViewportSpecificData: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displaySets: [],\r\n    };\r\n  }\r\n\r\n  getDisplaySets(studies) {\r\n    const displaySets = [];\r\n    studies.forEach(study => {\r\n      study.displaySets.forEach(dSet => {\r\n        if (!dSet.plugin) {\r\n          dSet.plugin = 'cornerstone';\r\n        }\r\n        displaySets.push(dSet);\r\n      });\r\n    });\r\n\r\n    return displaySets;\r\n  }\r\n\r\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\r\n    const study = studies.find(study => {\r\n      return study.StudyInstanceUID === StudyInstanceUID;\r\n    });\r\n\r\n    if (!study) {\r\n      return;\r\n    }\r\n\r\n    return study.displaySets.find(displaySet => {\r\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add beforeUnload event handler to check for unsaved changes\r\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n\r\n    // Get all the display sets for the viewer studies\r\n    if (this.props.studies) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevViewportAmount = prevProps.layout.viewports.length;\r\n    const viewportAmount = this.props.layout.viewports.length;\r\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\r\n\r\n    if (\r\n      this.props.studies !== prevProps.studies ||\r\n      (viewportAmount !== prevViewportAmount && !isVtk)\r\n    ) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  fillEmptyViewportPanes = () => {\r\n    // TODO: Here is the entry point for filling viewports on load.\r\n    const dirtyViewportPanes = [];\r\n    const { layout, viewportSpecificData } = this.props;\r\n    const { displaySets } = this.state;\r\n\r\n    if (!displaySets || !displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < layout.viewports.length; i++) {\r\n      const viewportPane = viewportSpecificData[i];\r\n      const isNonEmptyViewport =\r\n        viewportPane &&\r\n        viewportPane.StudyInstanceUID &&\r\n        viewportPane.displaySetInstanceUID;\r\n\r\n      if (isNonEmptyViewport) {\r\n        dirtyViewportPanes.push({\r\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\r\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      const foundDisplaySet =\r\n        displaySets.find(\r\n          ds =>\r\n            !dirtyViewportPanes.some(\r\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\r\n            )\r\n        ) || displaySets[displaySets.length - 1];\r\n\r\n      dirtyViewportPanes.push(foundDisplaySet);\r\n    }\r\n\r\n    dirtyViewportPanes.forEach((vp, i) => {\r\n      if (vp && vp.StudyInstanceUID) {\r\n        this.setViewportData({\r\n          viewportIndex: i,\r\n          StudyInstanceUID: vp.StudyInstanceUID,\r\n          displaySetInstanceUID: vp.displaySetInstanceUID,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  setViewportData = ({\r\n    viewportIndex,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n  }) => {\r\n    const displaySet = this.findDisplaySet(\r\n      this.props.studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\r\n  };\r\n\r\n  render() {\r\n    const { viewportSpecificData } = this.props;\r\n    const viewportData = values(viewportSpecificData);\r\n\r\n    return (\r\n      <div className=\"ViewerMain\">\r\n        {this.state.displaySets.length && (\r\n          <ConnectedViewportGrid\r\n            isStudyLoaded={this.props.isStudyLoaded}\r\n            studies={this.props.studies}\r\n            viewportData={viewportData}\r\n            setViewportData={this.setViewportData}\r\n          >\r\n            {/* Children to add to each viewport that support children */}\r\n          </ConnectedViewportGrid>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear the entire viewport specific data\r\n    const { viewportSpecificData } = this.props;\r\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\r\n      this.props.clearViewportSpecificData(viewportIndex);\r\n    });\r\n\r\n    // TODO: These don't have to be viewer specific?\r\n    // Could qualify for other routes?\r\n    // hotkeys.destroy();\r\n\r\n    // Remove beforeUnload event handler...\r\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n    // Destroy the synchronizer used to update reference lines\r\n    //OHIF.viewer.updateImageSynchronizer.destroy();\r\n    // TODO: Instruct all plugins to clean up themselves\r\n    //\r\n    // Clear references to all stacks in the StackManager\r\n    //StackManager.clearStacks();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.Studies collection\r\n    //OHIF.viewer.Studies.removeAll();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.StudyMetadataList collection\r\n    //OHIF.viewer.StudyMetadataList.removeAll();\r\n  }\r\n}\r\n\r\nexport default ViewerMain;\r\n","import OHIF from '@ohif/core';\r\nimport ViewerMain from './ViewerMain';\r\nimport { connect } from 'react-redux';\r\n\r\nconst {\r\n  setViewportSpecificData,\r\n  clearViewportSpecificData,\r\n} = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\r\n\r\n  return {\r\n    activeViewportIndex,\r\n    layout,\r\n    viewportSpecificData,\r\n    viewports: state.viewports,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerMain = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerMain);\r\n\r\nexport default ConnectedViewerMain;\r\n","import './SidePanel.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nclass SidePanel extends Component {\r\n  static propTypes = {\r\n    from: PropTypes.string.isRequired,\r\n    isOpen: PropTypes.bool.isRequired,\r\n    children: PropTypes.node,\r\n    width: PropTypes.string,\r\n  };\r\n\r\n  render() {\r\n    const fromSideClass =\r\n      this.props.from === 'right' ? 'from-right' : 'from-left';\r\n\r\n    const styles = this.props.width\r\n      ? {\r\n          maxWidth: this.props.width,\r\n          marginRight: this.props.isOpen\r\n            ? '0'\r\n            : Number.parseInt(this.props.width) * -1,\r\n        }\r\n      : {};\r\n\r\n    return (\r\n      <section\r\n        style={styles}\r\n        className={classNames('sidepanel', fromSideClass, {\r\n          'is-open': this.props.isOpen,\r\n        })}\r\n      >\r\n        {this.props.children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SidePanel;\r\n","import React, { useState } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { ErrorBoundary, Icon } from '@ohif/ui';\r\nimport { servicesManager } from './../../App';\r\n\r\nimport './ErrorBoundaryDialog.css';\r\n\r\nconst { UIModalService } = servicesManager.services;\r\n\r\nconst ErrorBoundaryDialog = ({ context, children }) => {\r\n  const handleOnError = (error, componentStack) => {\r\n    const ErrorDialog = () => {\r\n      const [open, setOpen] = useState(false);\r\n\r\n      return (\r\n        <div className=\"ErrorFallback\" role=\"alert\">\r\n          <div className=\"ErrorBoundaryDialog\">\r\n            <h3 className=\"ErrorBoundaryDialogTitle\">\r\n              {context}: <span>{error.message}</span>\r\n            </h3>\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\r\n            onClick={() => setOpen(s => !s)}\r\n          >\r\n            <Icon\r\n              name=\"chevron-down\"\r\n              className={classnames('ErrorBoundaryDialogIcon', {\r\n                opened: open,\r\n              })}\r\n            />\r\n            Stack Trace\r\n          </button>\r\n\r\n          {open && <pre>{componentStack}</pre>}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    UIModalService.show({\r\n      content: ErrorDialog,\r\n      title: `Something went wrong in ${context}`,\r\n    });\r\n  };\r\n\r\n  const fallbackComponent = () => (\r\n    <div className=\"ErrorFallback\" role=\"alert\">\r\n      <p>\r\n        Error rendering {context}. <br /> Check the browser console for more\r\n        details.\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ErrorBoundary\r\n      fallbackComponent={fallbackComponent}\r\n      context={context}\r\n      onError={handleOnError}\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nErrorBoundaryDialog.propTypes = {\r\n  context: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\r\nimport { withDialog } from '@ohif/ui';\r\nimport moment from 'moment';\r\nimport ConnectedHeader from './ConnectedHeader.js';\r\nimport ToolbarRow from './ToolbarRow.js';\r\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\r\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\r\nimport SidePanel from './../components/SidePanel.js';\r\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\r\nimport { extensionManager } from './../App.js';\r\n\r\n// Contexts\r\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\r\nimport UserManagerContext from '../context/UserManagerContext';\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport './Viewer.css';\r\n\r\nclass Viewer extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        StudyInstanceUID: PropTypes.string.isRequired,\r\n        StudyDate: PropTypes.string,\r\n        PatientID: PropTypes.string,\r\n        displaySets: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            displaySetInstanceUID: PropTypes.string.isRequired,\r\n            SeriesDescription: PropTypes.string,\r\n            SeriesNumber: PropTypes.number,\r\n            InstanceNumber: PropTypes.number,\r\n            numImageFrames: PropTypes.number,\r\n            Modality: PropTypes.string.isRequired,\r\n            images: PropTypes.arrayOf(\r\n              PropTypes.shape({\r\n                getImageId: PropTypes.func.isRequired,\r\n              })\r\n            ),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n    studyInstanceUIDs: PropTypes.array,\r\n    activeServer: PropTypes.shape({\r\n      type: PropTypes.string,\r\n      wadoRoot: PropTypes.string,\r\n    }),\r\n    onTimepointsUpdated: PropTypes.func,\r\n    onMeasurementsUpdated: PropTypes.func,\r\n    // window.store.getState().viewports.viewportSpecificData\r\n    viewports: PropTypes.object.isRequired,\r\n    // window.store.getState().viewports.activeViewportIndex\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    isStudyLoaded: PropTypes.bool,\r\n    dialog: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { activeServer } = this.props;\r\n    const server = Object.assign({}, activeServer);\r\n\r\n    OHIF.measurements.MeasurementApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: DICOMSR.retrieveMeasurements,\r\n        store: DICOMSR.storeMeasurements,\r\n      },\r\n      server,\r\n    });\r\n\r\n    OHIF.measurements.TimepointApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: this.retrieveTimepoints,\r\n        store: this.storeTimepoints,\r\n        remove: this.removeTimepoint,\r\n        update: this.updateTimepoint,\r\n        disassociate: this.disassociateStudy,\r\n      },\r\n    });\r\n  }\r\n\r\n  state = {\r\n    isLeftSidePanelOpen: true,\r\n    isRightSidePanelOpen: false,\r\n    selectedRightSidePanel: '',\r\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\r\n    thumbnails: [],\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.dialog) {\r\n      this.props.dialog.dismissAll();\r\n    }\r\n  }\r\n\r\n  retrieveTimepoints = filter => {\r\n    OHIF.log.info('retrieveTimepoints');\r\n\r\n    // Get the earliest and latest study date\r\n    let earliestDate = new Date().toISOString();\r\n    let latestDate = new Date().toISOString();\r\n    if (this.props.studies) {\r\n      latestDate = new Date('1000-01-01').toISOString();\r\n      this.props.studies.forEach(study => {\r\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\r\n        if (StudyDate < earliestDate) {\r\n          earliestDate = StudyDate;\r\n        }\r\n        if (StudyDate > latestDate) {\r\n          latestDate = StudyDate;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Return a generic timepoint\r\n    return Promise.resolve([\r\n      {\r\n        timepointType: 'baseline',\r\n        timepointId: 'TimepointId',\r\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\r\n        PatientID: filter.PatientID,\r\n        earliestDate,\r\n        latestDate,\r\n        isLocked: false,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  storeTimepoints = timepointData => {\r\n    OHIF.log.info('storeTimepoints');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  updateTimepoint = (timepointData, query) => {\r\n    OHIF.log.info('updateTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  removeTimepoint = timepointId => {\r\n    OHIF.log.info('removeTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\r\n    OHIF.log.info('disassociateStudy');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onTimepointsUpdated = timepoints => {\r\n    if (this.props.onTimepointsUpdated) {\r\n      this.props.onTimepointsUpdated(timepoints);\r\n    }\r\n  };\r\n\r\n  onMeasurementsUpdated = measurements => {\r\n    if (this.props.onMeasurementsUpdated) {\r\n      this.props.onMeasurementsUpdated(measurements);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { studies, isStudyLoaded } = this.props;\r\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\r\n    const currentTimepointId = 'TimepointId';\r\n\r\n    const timepointApi = new TimepointApi(currentTimepointId, {\r\n      onTimepointsUpdated: this.onTimepointsUpdated,\r\n    });\r\n\r\n    const measurementApi = new MeasurementApi(timepointApi, {\r\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\r\n    });\r\n\r\n    this.currentTimepointId = currentTimepointId;\r\n    this.timepointApi = timepointApi;\r\n    this.measurementApi = measurementApi;\r\n\r\n    if (studies) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n\r\n      timepointApi.retrieveTimepoints({ PatientID });\r\n      if (isStudyLoaded) {\r\n        this.measurementApi.retrieveMeasurements(PatientID, [\r\n          currentTimepointId,\r\n        ]);\r\n      }\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { studies, isStudyLoaded } = this.props;\r\n    if (studies !== prevProps.studies) {\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies),\r\n      });\r\n    }\r\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n      const { currentTimepointId } = this;\r\n\r\n      this.timepointApi.retrieveTimepoints({ PatientID });\r\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let VisiblePanelLeft, VisiblePanelRight;\r\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    panelExtensions.forEach(panelExt => {\r\n      panelExt.module.components.forEach(comp => {\r\n        if (comp.id === this.state.selectedRightSidePanel) {\r\n          VisiblePanelRight = comp.component;\r\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\r\n          VisiblePanelLeft = comp.component;\r\n        }\r\n      });\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {/* HEADER */}\r\n        <WhiteLabelingContext.Consumer>\r\n          {whiteLabeling => (\r\n            <UserManagerContext.Consumer>\r\n              {userManager => (\r\n                <AppContext.Consumer>\r\n                  {appContext => (\r\n                    <ConnectedHeader\r\n                      linkText={\r\n                        appContext.appConfig.showStudyList\r\n                          ? 'Study List'\r\n                          : undefined\r\n                      }\r\n                      linkPath={\r\n                        appContext.appConfig.showStudyList ? '/' : undefined\r\n                      }\r\n                      userManager={userManager}\r\n                    >\r\n                      {whiteLabeling &&\r\n                        whiteLabeling.createLogoComponentFn &&\r\n                        whiteLabeling.createLogoComponentFn(React)}\r\n                    </ConnectedHeader>\r\n                  )}\r\n                </AppContext.Consumer>\r\n              )}\r\n            </UserManagerContext.Consumer>\r\n          )}\r\n        </WhiteLabelingContext.Consumer>\r\n\r\n        {/* TOOLBAR */}\r\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\r\n          <ToolbarRow\r\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\r\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\r\n            selectedLeftSidePanel={\r\n              this.state.isLeftSidePanelOpen\r\n                ? this.state.selectedLeftSidePanel\r\n                : ''\r\n            }\r\n            selectedRightSidePanel={\r\n              this.state.isRightSidePanelOpen\r\n                ? this.state.selectedRightSidePanel\r\n                : ''\r\n            }\r\n            handleSidePanelChange={(side, selectedPanel) => {\r\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\r\n              const openKey = `is${sideClicked}SidePanelOpen`;\r\n              const selectedKey = `selected${sideClicked}SidePanel`;\r\n              const updatedState = Object.assign({}, this.state);\r\n\r\n              const isOpen = updatedState[openKey];\r\n              const prevSelectedPanel = updatedState[selectedKey];\r\n              // RoundedButtonGroup returns `null` if selected button is clicked\r\n              const isSameSelectedPanel =\r\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\r\n\r\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\r\n\r\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\r\n              if (isClosedOrShouldClose) {\r\n                updatedState[openKey] = !updatedState[openKey];\r\n              }\r\n\r\n              this.setState(updatedState);\r\n            }}\r\n            studies={this.props.studies}\r\n          />\r\n        </ErrorBoundaryDialog>\r\n\r\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\r\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\r\n\r\n        {/* VIEWPORTS + SIDEPANELS */}\r\n        <div className=\"FlexboxLayout\">\r\n          {/* LEFT */}\r\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\r\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\r\n              {VisiblePanelLeft ? (\r\n                <VisiblePanelLeft\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              ) : (\r\n                <ConnectedStudyBrowser\r\n                  studies={this.state.thumbnails}\r\n                  studyMetadata={this.props.studies}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n\r\n          {/* MAIN */}\r\n          <div className={classNames('main-content')}>\r\n            <ErrorBoundaryDialog context=\"ViewerMain\">\r\n              <ConnectedViewerMain\r\n                studies={this.props.studies}\r\n                isStudyLoaded={this.props.isStudyLoaded}\r\n              />\r\n            </ErrorBoundaryDialog>\r\n          </div>\r\n\r\n          {/* RIGHT */}\r\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\r\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\r\n              {VisiblePanelRight && (\r\n                <VisiblePanelRight\r\n                  isOpen={this.state.isRightSidePanelOpen}\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withDialog(Viewer);\r\n\r\n/**\r\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\r\n * a mapping layer?\r\n *\r\n * TODO[react]:\r\n * - Add sorting of display sets\r\n * - Add showStackLoadingProgressBar option\r\n *\r\n * @param {Study[]} studies\r\n * @param {DisplaySet[]} studies[].displaySets\r\n */\r\nconst _mapStudiesToThumbnails = function(studies) {\r\n  return studies.map(study => {\r\n    const { StudyInstanceUID } = study;\r\n\r\n    const thumbnails = study.displaySets.map(displaySet => {\r\n      const {\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        SeriesNumber,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n      } = displaySet;\r\n\r\n      let imageId;\r\n      let altImageText;\r\n\r\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\r\n        // TODO: We want to replace this with a thumbnail showing\r\n        // the segmentation map on the image, but this is easier\r\n        // and better than what we have right now.\r\n        altImageText = 'SEG';\r\n      } else if (displaySet.images && displaySet.images.length) {\r\n        const imageIndex = Math.floor(displaySet.images.length / 2);\r\n\r\n        imageId = displaySet.images[imageIndex].getImageId();\r\n      } else {\r\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\r\n      }\r\n\r\n      return {\r\n        imageId,\r\n        altImageText,\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        SeriesNumber,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n      };\r\n    });\r\n\r\n    return {\r\n      StudyInstanceUID,\r\n      thumbnails,\r\n    };\r\n  });\r\n};\r\n","import { connect } from 'react-redux';\r\nimport Viewer from './Viewer.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n  return servers.servers.find(isActive);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { viewports, servers } = state;\r\n  return {\r\n    viewports: viewports.viewportSpecificData,\r\n    activeViewportIndex: viewports.activeViewportIndex,\r\n    activeServer: getActiveServer(servers),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTimepointsUpdated: timepoints => {\r\n      dispatch(setTimepoints(timepoints));\r\n    },\r\n    onMeasurementsUpdated: measurements => {\r\n      dispatch(setMeasurements(measurements));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Viewer);\r\n\r\nexport default ConnectedViewer;\r\n"],"sourceRoot":""}